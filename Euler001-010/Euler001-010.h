#include "EulerShared.h"
#include <iostream>
using namespace std;
//Problem 1: Multiples of 3 and 5
//If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
//
//Find the sum of all the multiples of 3 or 5 below 1000.
void Euler001();
//Even Fibonacci numbers
//Problem 2
//Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//
//1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
//By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
void Euler002();
#define FIB_LIMIT 4000000
//Problem 3: Largest prime factor
//The prime factors of 13195 are 5, 7, 13 and 29.
//What is the largest prime factor of the number 600851475143 ?
#define FACTORER 600851475143L 
void Euler003();
//Problem 4: Largest palindrome product
//A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 99.
//Find the largest palindrome made from the product of two 3-digit numbers.
void Euler004();
#define PALINDROME_PRODUCT_START 100
#define PALINDROME_PRODUCT_END 999
#define PALINDROME_MAX_LENGTH 8
//Problem 5: Smallest multiple
//2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
//What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
void Euler005();
//Problem 6: Sum square difference
//The sum of the squares of the first ten natural numbers is,
//
//1^2 + 2^2 + ... + 10^2 = 385
//The square of the sum of the first ten natural numbers is,
//
//(1 + 2 + ... + 10)^2 = 55^2 = 3025
//Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
//
//Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
void Euler006();
void Euler007();

#define NUM "73167176531330624919225119674426574742355349194934"\
			"96983520312774506326239578318016984801869478851843"\
			"85861560789112949495459501737958331952853208805511"\
			"12540698747158523863050715693290963295227443043557"\
			"66896648950445244523161731856403098711121722383113"\
			"62229893423380308135336276614282806444486645238749"\
			"30358907296290491560440772390713810515859307960866"\
			"70172427121883998797908792274921901699720888093776"\
			"65727333001053367881220235421809751254540594752243"\
			"52584907711670556013604839586446706324415722155397"\
			"53697817977846174064955149290862569321978468622482"\
			"83972241375657056057490261407972968652414535100474"\
			"82166370484403199890008895243450658541227588666881"\
			"16427171479924442928230863465674813919123162824586"\
			"17866458359124566529476545682848912883142607690042"\
			"24219022671055626321111109370544217506941658960408"\
			"07198403850962455444362981230987879927244284909188"\
			"84580156166097919133875499200524063689912560717606"\
			"05886116467109405077541002256983155200055935729725"\
			"71636269561882670428252483600823257530420752963450"
void Euler008();
void Euler009();
void Euler010();